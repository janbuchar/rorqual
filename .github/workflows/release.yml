name: Publish a release

on:
  workflow_dispatch:
    inputs:
      release_number:
        required: true
        type: string

jobs:

  gh_release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "release-${{ github.event.inputs.release_number }}"
          name: "Release ${{ github.event.inputs.release_number }}"

  prepare_pkgbuild:
    runs-on: ubuntu-latest
    needs: gh_release
    env:
      TARBALL_URL: https://github.com/janbuchar/rorqual/archive/refs/tags/release-${{ github.event.inputs.release_number }}.tar.gz
      RELEASE_NUMBER: ${{ github.event.inputs.release_number }}
      GH_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2
      - name: Use cache
        uses: actions/cache@v4
        with:
          path: out/
          key: ${{ github.run_id }}
      - name: Prepare output dir
        run: mkdir -p out
      - name: Create requirements.txt
        run: |
          poetry export -f requirements.txt --without-hashes --without dev -o out/requirements.txt
          cat out/requirements.txt
      - name: Copy launcher
        run: cp aur/rorqual out/rorqual
      - name: Create PKGBUILD
        run: |
          cat aur/PKGBUILD.template | 
            TARBALL_HASH=$(gh api $TARBALL_URL | sha256sum | cut -f 1 -d " ") \
            REQUIREMENTS_HASH=$(sha256sum out/requirements.txt | cut -f 1 -d " ") \
            LAUNCHER_HASH=$(sha256sum out/rorqual | cut -f 1 -d " ") \
            envsubst '${TARBALL_URL} ${RELEASE_NUMBER} ${TARBALL_HASH} ${REQUIREMENTS_HASH} ${LAUNCHER_HASH}' > out/PKGBUILD
          cat out/PKGBUILD

  aur_push:
    runs-on: ubuntu-latest
    needs: prepare_pkgbuild
    steps:
      - name: Use cache
        uses: actions/cache@v4
        with:
          path: out/
          key: ${{ github.run_id }}
      - name: Prepare output dir
        run: mkdir -p out
      - name: Setup AUR SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.AUR_PRIVATE_KEY }}
      - name: Checkout AUR package
        run: |
          mkdir -p .ssh
          ssh-keyscan aur.archlinux.org >> ~/.ssh/known_hosts
          git init
          git remote add origin ssh://aur@aur.archlinux.org/rorqual-venv.git
          git pull origin master
      - name: Apply changes
        run: |
          mv out/* ./
          rm -rf out
      - name: Prepare .SRCINFO
        uses: heyhusen/archlinux-package-action@v2.2.1
        with:
          flags: ''
          namcap: false
          srcinfo: true
      - name: Push to AUR
        run: |
          git config --global user.email "ci@bucharjan.cz"
          git config --global user.name "Jan Buchar"
          git add .
          git commit -m "Release ${{ github.event.inputs.release_number }}"
          git push origin master
